// Code generated by protoc-gen-go.
// source: gopkg.in/samegoal/protoclosure.v0/test.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	gopkg.in/samegoal/protoclosure.v0/test.proto

It has these top-level messages:
	TestAllTypes
*/
package test

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type TestAllTypes_NestedEnum int32

const (
	TestAllTypes_FOO TestAllTypes_NestedEnum = 0
	TestAllTypes_BAR TestAllTypes_NestedEnum = 2
	TestAllTypes_BAZ TestAllTypes_NestedEnum = 3
)

var TestAllTypes_NestedEnum_name = map[int32]string{
	0: "FOO",
	2: "BAR",
	3: "BAZ",
}
var TestAllTypes_NestedEnum_value = map[string]int32{
	"FOO": 0,
	"BAR": 2,
	"BAZ": 3,
}

func (x TestAllTypes_NestedEnum) Enum() *TestAllTypes_NestedEnum {
	p := new(TestAllTypes_NestedEnum)
	*p = x
	return p
}
func (x TestAllTypes_NestedEnum) String() string {
	return proto.EnumName(TestAllTypes_NestedEnum_name, int32(x))
}
func (x *TestAllTypes_NestedEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestAllTypes_NestedEnum_value, data, "TestAllTypes_NestedEnum")
	if err != nil {
		return err
	}
	*x = TestAllTypes_NestedEnum(value)
	return nil
}

type TestAllTypes struct {
	// Singular
	OptionalInt32         *int32                      `protobuf:"varint,1,opt,name=optional_int32" json:"optional_int32,omitempty"`
	OptionalInt64         *int64                      `protobuf:"varint,2,opt,name=optional_int64,def=1" json:"optional_int64,omitempty"`
	OptionalUint32        *uint32                     `protobuf:"varint,3,opt,name=optional_uint32" json:"optional_uint32,omitempty"`
	OptionalUint64        *uint64                     `protobuf:"varint,4,opt,name=optional_uint64" json:"optional_uint64,omitempty"`
	OptionalSint32        *int32                      `protobuf:"zigzag32,5,opt,name=optional_sint32" json:"optional_sint32,omitempty"`
	OptionalSint64        *int64                      `protobuf:"zigzag64,6,opt,name=optional_sint64" json:"optional_sint64,omitempty"`
	OptionalFixed32       *uint32                     `protobuf:"fixed32,7,opt,name=optional_fixed32" json:"optional_fixed32,omitempty"`
	OptionalFixed64       *uint64                     `protobuf:"fixed64,8,opt,name=optional_fixed64" json:"optional_fixed64,omitempty"`
	OptionalSfixed32      *int32                      `protobuf:"fixed32,9,opt,name=optional_sfixed32" json:"optional_sfixed32,omitempty"`
	OptionalSfixed64      *int64                      `protobuf:"fixed64,10,opt,name=optional_sfixed64" json:"optional_sfixed64,omitempty"`
	OptionalFloat         *float32                    `protobuf:"fixed32,11,opt,name=optional_float,def=1.5" json:"optional_float,omitempty"`
	OptionalDouble        *float64                    `protobuf:"fixed64,12,opt,name=optional_double" json:"optional_double,omitempty"`
	OptionalBool          *bool                       `protobuf:"varint,13,opt,name=optional_bool" json:"optional_bool,omitempty"`
	OptionalString        *string                     `protobuf:"bytes,14,opt,name=optional_string" json:"optional_string,omitempty"`
	OptionalBytes         []byte                      `protobuf:"bytes,15,opt,name=optional_bytes,def=moo" json:"optional_bytes,omitempty"`
	Optionalgroup         *TestAllTypes_OptionalGroup `protobuf:"group,16,opt,name=OptionalGroup" json:"optionalgroup,omitempty"`
	OptionalNestedMessage *TestAllTypes_NestedMessage `protobuf:"bytes,18,opt,name=optional_nested_message" json:"optional_nested_message,omitempty"`
	OptionalNestedEnum    *TestAllTypes_NestedEnum    `protobuf:"varint,21,opt,name=optional_nested_enum,enum=TestAllTypes_NestedEnum" json:"optional_nested_enum,omitempty"`
	OptionalInt64Number   *int64                      `protobuf:"varint,50,opt,name=optional_int64_number,def=9007199254740991" json:"optional_int64_number,omitempty"`
	OptionalInt64String   *int64                      `protobuf:"varint,51,opt,name=optional_int64_string,def=9007199254740993" json:"optional_int64_string,omitempty"`
	// Repeated
	RepeatedInt32         []int32                       `protobuf:"varint,31,rep,name=repeated_int32" json:"repeated_int32,omitempty"`
	RepeatedInt64         []int64                       `protobuf:"varint,32,rep,name=repeated_int64" json:"repeated_int64,omitempty"`
	RepeatedUint32        []uint32                      `protobuf:"varint,33,rep,name=repeated_uint32" json:"repeated_uint32,omitempty"`
	RepeatedUint64        []uint64                      `protobuf:"varint,34,rep,name=repeated_uint64" json:"repeated_uint64,omitempty"`
	RepeatedSint32        []int32                       `protobuf:"zigzag32,35,rep,name=repeated_sint32" json:"repeated_sint32,omitempty"`
	RepeatedSint64        []int64                       `protobuf:"zigzag64,36,rep,name=repeated_sint64" json:"repeated_sint64,omitempty"`
	RepeatedFixed32       []uint32                      `protobuf:"fixed32,37,rep,name=repeated_fixed32" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64       []uint64                      `protobuf:"fixed64,38,rep,name=repeated_fixed64" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32      []int32                       `protobuf:"fixed32,39,rep,name=repeated_sfixed32" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64      []int64                       `protobuf:"fixed64,40,rep,name=repeated_sfixed64" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat         []float32                     `protobuf:"fixed32,41,rep,name=repeated_float" json:"repeated_float,omitempty"`
	RepeatedDouble        []float64                     `protobuf:"fixed64,42,rep,name=repeated_double" json:"repeated_double,omitempty"`
	RepeatedBool          []bool                        `protobuf:"varint,43,rep,name=repeated_bool" json:"repeated_bool,omitempty"`
	RepeatedString        []string                      `protobuf:"bytes,44,rep,name=repeated_string" json:"repeated_string,omitempty"`
	RepeatedBytes         [][]byte                      `protobuf:"bytes,45,rep,name=repeated_bytes" json:"repeated_bytes,omitempty"`
	Repeatedgroup         []*TestAllTypes_RepeatedGroup `protobuf:"group,46,rep,name=RepeatedGroup" json:"repeatedgroup,omitempty"`
	RepeatedNestedMessage []*TestAllTypes_NestedMessage `protobuf:"bytes,48,rep,name=repeated_nested_message" json:"repeated_nested_message,omitempty"`
	RepeatedNestedEnum    []TestAllTypes_NestedEnum     `protobuf:"varint,49,rep,name=repeated_nested_enum,enum=TestAllTypes_NestedEnum" json:"repeated_nested_enum,omitempty"`
	RepeatedInt64Number   []int64                       `protobuf:"varint,52,rep,name=repeated_int64_number" json:"repeated_int64_number,omitempty"`
	RepeatedInt64String   []int64                       `protobuf:"varint,53,rep,name=repeated_int64_string" json:"repeated_int64_string,omitempty"`
	XXX_unrecognized      []byte                        `json:"-"`
}

func (m *TestAllTypes) Reset()         { *m = TestAllTypes{} }
func (m *TestAllTypes) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes) ProtoMessage()    {}

const Default_TestAllTypes_OptionalInt64 int64 = 1
const Default_TestAllTypes_OptionalFloat float32 = 1.5

var Default_TestAllTypes_OptionalBytes []byte = []byte("moo")

const Default_TestAllTypes_OptionalInt64Number int64 = 9007199254740991
const Default_TestAllTypes_OptionalInt64String int64 = 9007199254740993

func (m *TestAllTypes) GetOptionalInt32() int32 {
	if m != nil && m.OptionalInt32 != nil {
		return *m.OptionalInt32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalInt64() int64 {
	if m != nil && m.OptionalInt64 != nil {
		return *m.OptionalInt64
	}
	return Default_TestAllTypes_OptionalInt64
}

func (m *TestAllTypes) GetOptionalUint32() uint32 {
	if m != nil && m.OptionalUint32 != nil {
		return *m.OptionalUint32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalUint64() uint64 {
	if m != nil && m.OptionalUint64 != nil {
		return *m.OptionalUint64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSint32() int32 {
	if m != nil && m.OptionalSint32 != nil {
		return *m.OptionalSint32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSint64() int64 {
	if m != nil && m.OptionalSint64 != nil {
		return *m.OptionalSint64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalFixed32() uint32 {
	if m != nil && m.OptionalFixed32 != nil {
		return *m.OptionalFixed32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalFixed64() uint64 {
	if m != nil && m.OptionalFixed64 != nil {
		return *m.OptionalFixed64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSfixed32() int32 {
	if m != nil && m.OptionalSfixed32 != nil {
		return *m.OptionalSfixed32
	}
	return 0
}

func (m *TestAllTypes) GetOptionalSfixed64() int64 {
	if m != nil && m.OptionalSfixed64 != nil {
		return *m.OptionalSfixed64
	}
	return 0
}

func (m *TestAllTypes) GetOptionalFloat() float32 {
	if m != nil && m.OptionalFloat != nil {
		return *m.OptionalFloat
	}
	return Default_TestAllTypes_OptionalFloat
}

func (m *TestAllTypes) GetOptionalDouble() float64 {
	if m != nil && m.OptionalDouble != nil {
		return *m.OptionalDouble
	}
	return 0
}

func (m *TestAllTypes) GetOptionalBool() bool {
	if m != nil && m.OptionalBool != nil {
		return *m.OptionalBool
	}
	return false
}

func (m *TestAllTypes) GetOptionalString() string {
	if m != nil && m.OptionalString != nil {
		return *m.OptionalString
	}
	return ""
}

func (m *TestAllTypes) GetOptionalBytes() []byte {
	if m != nil && m.OptionalBytes != nil {
		return m.OptionalBytes
	}
	return append([]byte(nil), Default_TestAllTypes_OptionalBytes...)
}

func (m *TestAllTypes) GetOptionalgroup() *TestAllTypes_OptionalGroup {
	if m != nil {
		return m.Optionalgroup
	}
	return nil
}

func (m *TestAllTypes) GetOptionalNestedMessage() *TestAllTypes_NestedMessage {
	if m != nil {
		return m.OptionalNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetOptionalNestedEnum() TestAllTypes_NestedEnum {
	if m != nil && m.OptionalNestedEnum != nil {
		return *m.OptionalNestedEnum
	}
	return TestAllTypes_FOO
}

func (m *TestAllTypes) GetOptionalInt64Number() int64 {
	if m != nil && m.OptionalInt64Number != nil {
		return *m.OptionalInt64Number
	}
	return Default_TestAllTypes_OptionalInt64Number
}

func (m *TestAllTypes) GetOptionalInt64String() int64 {
	if m != nil && m.OptionalInt64String != nil {
		return *m.OptionalInt64String
	}
	return Default_TestAllTypes_OptionalInt64String
}

func (m *TestAllTypes) GetRepeatedInt32() []int32 {
	if m != nil {
		return m.RepeatedInt32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64() []int64 {
	if m != nil {
		return m.RepeatedInt64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint64() []uint64 {
	if m != nil {
		return m.RepeatedUint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint32() []int32 {
	if m != nil {
		return m.RepeatedSint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint64() []int64 {
	if m != nil {
		return m.RepeatedSint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed32() []uint32 {
	if m != nil {
		return m.RepeatedFixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed64() []uint64 {
	if m != nil {
		return m.RepeatedFixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed32() []int32 {
	if m != nil {
		return m.RepeatedSfixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed64() []int64 {
	if m != nil {
		return m.RepeatedSfixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFloat() []float32 {
	if m != nil {
		return m.RepeatedFloat
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDouble() []float64 {
	if m != nil {
		return m.RepeatedDouble
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBool() []bool {
	if m != nil {
		return m.RepeatedBool
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedgroup() []*TestAllTypes_RepeatedGroup {
	if m != nil {
		return m.Repeatedgroup
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedEnum() []TestAllTypes_NestedEnum {
	if m != nil {
		return m.RepeatedNestedEnum
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64Number() []int64 {
	if m != nil {
		return m.RepeatedInt64Number
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64String() []int64 {
	if m != nil {
		return m.RepeatedInt64String
	}
	return nil
}

type TestAllTypes_NestedMessage struct {
	B                *int32 `protobuf:"varint,1,opt,name=b" json:"b,omitempty"`
	C                *int32 `protobuf:"varint,2,opt,name=c" json:"c,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TestAllTypes_NestedMessage) Reset()         { *m = TestAllTypes_NestedMessage{} }
func (m *TestAllTypes_NestedMessage) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes_NestedMessage) ProtoMessage()    {}

func (m *TestAllTypes_NestedMessage) GetB() int32 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

func (m *TestAllTypes_NestedMessage) GetC() int32 {
	if m != nil && m.C != nil {
		return *m.C
	}
	return 0
}

type TestAllTypes_OptionalGroup struct {
	A                *int32 `protobuf:"varint,17,opt,name=a" json:"a,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TestAllTypes_OptionalGroup) Reset()         { *m = TestAllTypes_OptionalGroup{} }
func (m *TestAllTypes_OptionalGroup) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes_OptionalGroup) ProtoMessage()    {}

func (m *TestAllTypes_OptionalGroup) GetA() int32 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

type TestAllTypes_RepeatedGroup struct {
	A                []int32 `protobuf:"varint,47,rep,name=a" json:"a,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestAllTypes_RepeatedGroup) Reset()         { *m = TestAllTypes_RepeatedGroup{} }
func (m *TestAllTypes_RepeatedGroup) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes_RepeatedGroup) ProtoMessage()    {}

func (m *TestAllTypes_RepeatedGroup) GetA() []int32 {
	if m != nil {
		return m.A
	}
	return nil
}

func init() {
	proto.RegisterEnum("TestAllTypes_NestedEnum", TestAllTypes_NestedEnum_name, TestAllTypes_NestedEnum_value)
}
